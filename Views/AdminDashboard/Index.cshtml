@using NotebookValidator.Web.ViewModels
@model AdminDashboardViewModel
@{
    ViewData["Title"] = "Dashboard de Administrador";
}

<h1 class="mb-4">@ViewData["Title"]</h1>

<form method="get" asp-action="Index">
    <div class="row g-3 align-items-center mb-4">
        <div class="col-auto">
            <label for="startDate" class="col-form-label">Fecha Inicio</label>
        </div>
        <div class="col-auto">
            <input type="date" id="startDate" name="startDate" class="form-control" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))">
        </div>
        <div class="col-auto">
            <label for="endDate" class="col-form-label">Fecha Fin</label>
        </div>
        <div class="col-auto">
            <input type="date" id="endDate" name="endDate" class="form-control" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))">
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">Filtrar</button>
        </div>
    </div>
</form>


<div class="row">
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stat-card text-white bg-info h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="card-title mb-0">@Model.TotalAnalyses</h3>
                        <p class="card-text">Análisis Realizados</p>
                    </div>
                    <div class="fs-1 opacity-50">
                        <i class="fas fa-chart-bar"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stat-card text-white bg-success h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="card-title mb-0">@Model.TotalProblemsFound</h3>
                        <p class="card-text">Problemas Encontrados</p>
                    </div>
                    <div class="fs-1 opacity-50">
                        <i class="fas fa-check-circle"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stat-card text-dark bg-warning h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="card-title mb-0">@Model.TotalUsers</h3>
                        <p class="card-text">Usuarios Registrados</p>
                    </div>
                    <div class="fs-1 opacity-50">
                        <i class="fas fa-users"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="card stat-card text-white bg-danger h-100">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="card-title mb-0">@Model.MostActiveUser</h3>
                        <p class="card-text">Usuario Más Activo</p>
                    </div>
                    <div class="fs-1 opacity-50">
                        <i class="fas fa-star"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-lg-7">
        <div class="card h-100">
            <div class="card-header">
                <h3 class="card-title">Distribución de Problemas</h3>
            </div>
            <div class="card-body" style="position: relative; height: 400px;">
                @if (Model.ProblemTypeCounts.Any())
                {
                    <canvas id="problemTypeChart"></canvas>
                }
                else
                {
                    <p class="text-center text-muted">No hay datos de problemas para mostrar en el período seleccionado.</p>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        <div class="card h-100">
            <div class="card-header">
                <h3 class="card-title">Análisis Recientes</h3>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var run in Model.RecentAnalyses)
                    {
                        <li class="list-group-item">
                            <a asp-controller="History" asp-action="Details" asp-route-id="@run.Id">Análisis #@run.Id</a>
                            <small class="text-muted d-block">Por: @run.User.Email - @run.AnalysisTimestamp.ToString("g")</small>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chartElement = document.getElementById('problemTypeChart');
            if (!chartElement) return;

            const ctx = chartElement.getContext('2d');

            const distribution = @Html.Raw(Json.Serialize(Model.ProblemTypeCounts));
            const severities = @Html.Raw(Json.Serialize(Model.ProblemTypeSeverities));

            const labels = Object.keys(distribution);
            const data = Object.values(distribution);

            const criticalColors = ['#B91C1C', '#DC2626', '#F87171'];
            const warningColors = ['#D97706', '#F59E0B', '#FBBF24'];
            const infoColors = ['#2563EB', '#3B82F6', '#60A5FA'];

            let criticalIndex = 0, warningIndex = 0, infoIndex = 0;

            const backgroundColors = labels.map(label => {
                const severity = severities[label];
                switch (severity) {
                    case 'Critical':
                        return criticalColors[criticalIndex++ % criticalColors.length];
                    case 'Warning':
                        return warningColors[warningIndex++ % warningColors.length];
                    case 'Info':
                    default:
                        return infoColors[infoIndex++ % infoColors.length];
                }
            });

            const myChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Distribución de Problemas',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: '#ffffff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        }
                    }
                }
            });
        });
    </script>
}